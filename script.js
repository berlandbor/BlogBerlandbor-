document.addEventListener("DOMContentLoaded", async () => {
    const postFiles = [
        "posts/1.txt",
        "posts/2.txt",
        "posts/3.txt",
        "posts/4.txt"
    ]; // –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π

    const postsPerPage = 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    let currentPage = 1;
    let allPosts = []; // –•—Ä–∞–Ω–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏

    const blogContainer = document.getElementById("blog");
    const tocContainer = document.getElementById("toc");
    const prevButton = document.getElementById("prevPage");
    const nextButton = document.getElementById("nextPage");
    const pageNumber = document.getElementById("pageNumber");
    const searchInput = document.getElementById("searchInput");

    // –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
    function transliterate(text) {
        const ruToEn = {
            "–∞": "a", "–±": "b", "–≤": "v", "–≥": "g", "–¥": "d", "–µ": "e", "—ë": "yo", "–∂": "zh", "–∑": "z",
            "–∏": "i", "–π": "y", "–∫": "k", "–ª": "l", "–º": "m", "–Ω": "n", "–æ": "o", "–ø": "p", "—Ä": "r",
            "—Å": "s", "—Ç": "t", "—É": "u", "—Ñ": "f", "—Ö": "h", "—Ü": "ts", "—á": "ch", "—à": "sh", "—â": "sch",
            "—ä": "", "—ã": "y", "—å": "", "—ç": "e", "—é": "yu", "—è": "ya"
        };
        return text.toLowerCase()
            .replace(/[–∞-—è—ë]/g, char => ruToEn[char] || char)
            .replace(/[^a-z0-9-]/g, "-")
            .replace(/-+/g, "-")
            .trim("-");
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π
    async function loadAllPosts() {
        allPosts = [];
        for (const file of postFiles) {
            try {
                const response = await fetch(file);
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${file}`);
                const text = await response.text();

                const lines = text.split("\n");
                const title = lines[0].trim();
                const date = lines[1].trim();
                const content = lines.slice(2).join("\n");

                allPosts.push({ title, date, content, file });
            } catch (error) {
                console.error(error);
            }
        }
        generateTOC();
        checkURLForArticle();
        displayPosts();
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    function generateTOC() {
        tocContainer.innerHTML = "<ul>";

        allPosts.forEach((post, index) => {
            const postSlug = transliterate(post.title);
            tocContainer.innerHTML += `<li><a href="?article=${index}&title=${postSlug}">${post.title}</a></li>`;
        });

        tocContainer.innerHTML += "</ul>";
    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–≤–µ—Ä—Ö
    function scrollToTop() {
        window.scrollTo({ top: 0, behavior: "smooth" });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
    function displayPosts() {
        blogContainer.innerHTML = "";

        const totalPages = Math.ceil(allPosts.length / postsPerPage);
        const startIndex = (currentPage - 1) * postsPerPage;
        const endIndex = startIndex + postsPerPage;
        const pagePosts = allPosts.slice(startIndex, endIndex);

        for (let i = 0; i < pagePosts.length; i++) {
            const post = pagePosts[i];
            const postSlug = transliterate(post.title);
            const article = document.createElement("div");
            article.classList.add("post");
            article.innerHTML = `
                <h2>${post.title}</h2>
                <p><small>${post.date}</small></p>
                <p>${post.content.replace(/\n/g, "<br>")}</p>
                <p>
                    <button class="copy-link" data-link="?article=${startIndex}&title=${postSlug}">üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
                    <button class="share-link" data-link="?article=${startIndex}&title=${postSlug}">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button>
                </p>
                <hr>
            `;
            blogContainer.appendChild(article);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pageNumber.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}`;
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage >= totalPages;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        document.querySelectorAll(".copy-link").forEach(button => {
            button.addEventListener("click", (event) => {
                const url = window.location.origin + window.location.pathname + event.target.getAttribute("data-link");
                navigator.clipboard.writeText(url).then(() => {
                    alert("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!");
                }).catch(err => {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏", err);
                });
            });
        });

        document.querySelectorAll(".share-link").forEach(button => {
            button.addEventListener("click", (event) => {
                const url = window.location.origin + window.location.pathname + event.target.getAttribute("data-link");
                if (navigator.share) {
                    navigator.share({
                        title: document.title,
                        url: url
                    }).catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", err));
                } else {
                    alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'. –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É.");
                }
            });
        });

        scrollToTop();
    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
    function checkURLForArticle() {
        const params = new URLSearchParams(window.location.search);
        if (params.has("article")) {
            const articleIndex = parseInt(params.get("article"));
            if (!isNaN(articleIndex) && articleIndex >= 0 && articleIndex < allPosts.length) {
                currentPage = articleIndex + 1;
                displayPosts();
                document.title = params.get("title").replace(/-/g, " ");
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    prevButton.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            displayPosts();
        }
    });

    nextButton.addEventListener("click", () => {
        const totalPages = Math.ceil(allPosts.length / postsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            displayPosts();
        }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    loadAllPosts();
});